import { NextRequest, NextResponse } from "next/server";
import Replicate from "replicate";
import { fetchProductInfo } from "@/utils/fetchProductInfo"; // ‚úÖ Cambio a "@"

export const config = {
  api: {
    bodyParser: false,
  },
};

export async function POST(req: NextRequest) {
  try {
    console.log("üìå API recibi√≥ una solicitud");

    // ‚úÖ Obtener `handle` desde el body o la URL si no est√° presente
    const { userImage, shop, handle: bodyHandle, productDescription } = await req.json();
    const urlHandle = new URL(req.url).searchParams.get("handle");
    const handle = bodyHandle || urlHandle; // üî• Toma el `handle` desde el body o la URL

    console.log("‚úÖ Recibido en la API:", {
      userImageLength: userImage?.length,
      shop,
      handle,
      productDescription,
    });

    if (!userImage || !shop || !handle || !productDescription) {
      console.error("‚ùå Faltan datos: userImage, shop, handle o productDescription");
      return NextResponse.json(
        { error: "User image, shop, handle, and product description are required" },
        { status: 400 }
      );
    }

    // üîÑ Obtener la imagen y la categor√≠a del producto desde Shopify Remix
    console.log("üîÑ Llamando a fetchProductInfo con:", { shop, handle });
    const productInfo = await fetchProductInfo(shop, handle);

    console.log("üîç Respuesta de fetchProductInfo:", productInfo);

    if (!productInfo) {
      console.error("‚ùå Error al obtener el producto o categor√≠a no v√°lida.");
      return NextResponse.json({ error: "Product not found or category unsupported" }, { status: 404 });
    }

    const { image: productImage, type: productCategory } = productInfo;
    console.log("‚úÖ Producto obtenido:", { productImage, productCategory });

    // üî• Asegurar que la categor√≠a es v√°lida
    if (!["upper_body", "lower_body", "dresses"].includes(productCategory)) {
      console.error("‚ùå Error: Categor√≠a no compatible con el modelo de IA.");
      return NextResponse.json({ error: "Product category is not supported." }, { status: 400 });
    }

    console.log("üîÑ Enviando solicitud a Replicate...");
    const replicate = new Replicate({
      auth: process.env.REPLICATE_API_TOKEN!,
    });

    const prediction = await replicate.predictions.create({
      version: "c871bb9b046607b680449ecbae55fd8c6d945e0a1948644bf2361b3d021d3ff4",
      input: {
        human_img: userImage,
        garm_img: productImage,
        garment_des: productDescription,
        category: productCategory,
        crop: true,
        seed: 42,
        steps: 30,
        force_dc: false,
        mask_only: false,
      },
    });

    console.log("üîç Predicci√≥n iniciada en Replicate:", prediction);

    if (!prediction || !prediction.urls || !prediction.urls.get) {
      console.error("‚ùå Replicate no devolvi√≥ una URL v√°lida", prediction);
      return NextResponse.json({ error: "Failed to initiate prediction" }, { status: 500 });
    }

    // üîÑ Esperamos la respuesta de Replicate
    let response;
    while (!response || response.status !== "succeeded") {
      await new Promise((res) => setTimeout(res, 2000));
      response = await fetch(prediction.urls.get, {
        headers: {
          Authorization: `Token ${process.env.REPLICATE_API_TOKEN}`,
        },
      }).then((res) => res.json());
      console.log("üîÑ Estado de la predicci√≥n:", response.status);
    }

    console.log("‚úÖ Respuesta final de Replicate:", response);

    let finalImage: string | null = null;

    if (typeof response.output === "string") {
      finalImage = response.output;
    } else if (Array.isArray(response.output) && response.output.length > 0) {
      finalImage = response.output[response.output.length - 1];
    }

    if (!finalImage) {
      console.error("‚ùå Replicate no devolvi√≥ una imagen v√°lida", response);
      return NextResponse.json({ error: "Failed to get image" }, { status: 500 });
    }

    console.log("‚úÖ Imagen generada:", finalImage);
    return NextResponse.json({ image_url: finalImage }, { status: 200 });
  } catch (error) {
    console.error("‚ùå Error en la API:", error);
    return NextResponse.json({ error: "Internal Server Error" }, { status: 500 });
  }
}
